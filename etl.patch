--- a/ETPatch.cpp	2011-02-20 17:36:41.776666670 +0100
+++ b/ETPatch.cpp	2011-02-20 17:37:17.886666670 +0100
@@ -76,7 +76,7 @@
       mMaxLOD = 1;
       mVertexOptions &= (~VO_LODMORPH);
     }
-    mLODChangeMinDistSqr = vector<Real>(mMaxLOD);
+    mLODChangeMinDistSqr = std::vector<Real>(mMaxLOD);
 
     mLastNextLOD = mMaxLOD+1;
 
@@ -310,7 +310,7 @@
     unsigned int patchSizeZ = mDescription->getNumVerticesZ();
 
     // lock delta buffers, if vertex morphing is enabled
-    vector<float*> pDeltas (mMaxLOD-1);
+    std::vector<float*> pDeltas (mMaxLOD-1);
     if (mVertexOptions & VO_LODMORPH)
     {
       for (unsigned int l = 0; l < mMaxLOD-1; ++l)
@@ -321,7 +321,7 @@
     unsigned int cacheStep = 1 << (mMaxLOD-1);
     unsigned int cacheSizeX = patchSizeX / cacheStep;
     unsigned int cacheSizeZ = patchSizeZ / cacheStep;
-    vector<RealArray2D> cache (mMaxLOD-1, RealArray2D(cacheStep+1, cacheStep+1, 0));
+    std::vector<RealArray2D> cache (mMaxLOD-1, RealArray2D(cacheStep+1, cacheStep+1, 0));
     // update all LOD frames which need updating, each frame is cacheStep x cacheStep
     for (VertexList::const_iterator it = dirtyLODFrames.begin(); it != dirtyLODFrames.end(); ++it)
     {
@@ -663,7 +663,7 @@
   Technique* Patch::getTechnique() const
   {
     // based on the current distance to the camera, select the appropriate LOD technique from the material
-    unsigned short lodIndex = mMaterial->getLodIndexSquaredDepth(mCurCameraDistanceSqr);
+    unsigned short lodIndex = mMaterial->getLodIndex(mCurCameraDistanceSqr*mCurCameraDistanceSqr);
     return mMaterial->getBestTechnique(lodIndex);
   }
 }
--- a/ETSplattingManager.cpp	2010-01-27 22:52:44.000000000 +0100
+++ b/ETSplattingManager.cpp	2011-02-20 17:40:21.563333336 +0100
@@ -139,7 +139,7 @@
     updateMaps = numMaps != mSplattingLayout->getNumSplattingMaps();
 
     // inform listeners about texture list change
-    for (vector<SplattingListener*>::iterator l = mListeners.begin(); l != mListeners.end(); ++l)
+    for (std::vector<SplattingListener*>::iterator l = mListeners.begin(); l != mListeners.end(); ++l)
     {
       (*l)->notifySplattingTextures(mTextures);
       if (updateMaps)
@@ -181,7 +181,7 @@
 
   void SplattingManager::removeListener(SplattingListener* listener)
   {
-    vector<SplattingListener*>::iterator it = find(mListeners.begin(), mListeners.end(), listener);
+    std::vector<SplattingListener*>::iterator it = find(mListeners.begin(), mListeners.end(), listener);
     if (it != mListeners.end())
       mListeners.erase(it);
   }
--- a/ETSubDescription.cpp	2010-01-27 22:52:44.000000000 +0100
+++ b/ETSubDescription.cpp	2011-02-20 17:42:06.530000003 +0100
@@ -57,7 +57,7 @@
     {
       // the parent is still active, so unregister as listener and inform own listeners of destruction
       mDescription->removeListener(this);
-      for (vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
+      for (std::vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
         (*it)->notifyDestroyed();
     }
   }
@@ -156,7 +156,7 @@
     if (subList.empty())
       return;
     // notify listeners
-    for (vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
+    for (std::vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
       (*it)->notifyUpdated(subList);
   }
 
@@ -164,7 +164,7 @@
   void SubDescription::notifyDestroyed()
   {
     // notify listeners
-    for (vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
+    for (std::vector<TerrainListener*>::iterator it = mListeners.begin(); it != mListeners.end(); ++it)
       (*it)->notifyDestroyed();
 
     // reset the parent description
